from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from keyboards import get_back_to_main_menu
from utils.helpers import send_article_content, format_search_results_text
from config import user_data, MAX_ARTICLES  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ MAX_ARTICLES –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
from parser import search_articles
from states import SearchStates
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

async def handle_search(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä', '–æ—Ç–ø—É—Å–∫', '–Ω–∞–ª–æ–≥–∏' –∏ —Ç.–¥.",
        reply_markup=get_back_to_main_menu()
    )
    await state.set_state(SearchStates.WAITING_FOR_QUERY)

async def process_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if len(query) < 2:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    try:
        await message.answer("üîç –ò—â—É —Å—Ç–∞—Ç—å–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
        articles = await search_articles(query, "ru")
        
        if not articles:
            await message.answer(
                f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.",
                reply_markup=get_back_to_main_menu()
            )
            await state.clear()
            return
        
        user_data[message.from_user.id] = {"search_results": articles, "search_query": query}
        
        builder = InlineKeyboardBuilder()
        for i in range(min(len(articles), MAX_ARTICLES)):
            title_short = articles[i]["title"][:40] + "..." if len(articles[i]["title"]) > 40 else articles[i]["title"]
            builder.add(types.InlineKeyboardButton(
                text=f"üìÑ {title_short}",
                callback_data=f"search_article_{i}"
            ))
        builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        builder.adjust(1)
        
        results_text = format_search_results_text(articles, query)
        
        await message.answer(results_text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_menu()
        )
        await state.clear()

async def handle_search_article(callback: types.CallbackQuery):
    await callback.answer()
    try:
        idx = int(callback.data.split("_")[2])
        user_search_results = user_data.get(callback.from_user.id, {}).get("search_results", [])
        
        if 0 <= idx < len(user_search_results):
            await send_article_content(callback.from_user.id, user_search_results[idx])
        else:
            await callback.message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())

def register_search_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_search, lambda c: c.data == "kadrovik_search")
    dp.message.register(process_search_query, SearchStates.WAITING_FOR_QUERY)
    dp.callback_query.register(handle_search_article, lambda c: c.data.startswith("search_article_"))