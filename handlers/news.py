from aiogram import Dispatcher, types
from config import user_data, news_parser
from keyboards import get_main_menu, get_back_to_main_menu
from datetime import datetime
import logging
from keyboards import InlineKeyboardBuilder
from parser import fetch_articles_from_site, fetch_article_content

logger = logging.getLogger(__name__)

async def handle_news_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–æ—Å—Ç–∏"""
    try:
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ —Å kadrovik.uz...")
        
        # –ü–∞—Ä—Å–∏–º 5 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        news_items = await fetch_articles_from_site(lang="ru", limit=5)
        
        if not news_items:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="‚ó∂Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ).as_markup()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ user_data
        user_data[callback.from_user.id] = {"news_items": news_items}
        
        builder = InlineKeyboardBuilder()
        for i, news in enumerate(news_items):
            title_short = news['title'][:45] + '...' if len(news['title']) > 45 else news['title']
            builder.add(types.InlineKeyboardButton(
                text=f"üì∞ {title_short}",
                callback_data=f"news_read_{i}"
            ))
        
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="news"),
            types.InlineKeyboardButton(text="‚ó∂Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        builder.adjust(1)
        
        message_text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞–¥—Ä–æ–≤–∏–∫–æ–≤</b>\n"
        message_text += f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {news_parser.base_url}\n\n"
        message_text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        message_text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        message_text += "üëÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —á—Ç–µ–Ω–∏—è:</b>\n\n"
        
        for i, news in enumerate(news_items[:3]):
            message_text += f"<b>{i+1}.</b> {news['title']}\n"
            message_text += f"üìÖ {news['date']}\n\n"
        
        if len(news_items) > 3:
            message_text += f"... –∏ –µ—â–µ {len(news_items) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_news_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(text="‚ó∂Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ).as_markup()
        )

async def handle_news_read(callback: types.CallbackQuery, news_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å"""
    try:
        news_items = user_data.get(callback.from_user.id, {}).get("news_items", [])
        if news_index >= len(news_items):
            await callback.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        news = news_items[news_index]
        
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏...")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
        full_content = await fetch_article_content(news['url'])
        
        message_text = f"üì∞ <b>{news['title']}</b>\n\n"
        message_text += f"üìÖ <i>–î–∞—Ç–∞: {news['date']}</i>\n"
        message_text += f"üåê <i>–ò—Å—Ç–æ—á–Ω–∏–∫: kadrovik.uz</i>\n\n"
        
        if full_content and len(full_content) > 100:
            content_preview = full_content[:2500]
            message_text += f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n\n{content_preview}"
            if len(full_content) > 2500:
                message_text += "\n\n<i>... —Å—Ç–∞—Ç—å—è –æ–±—Ä–µ–∑–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram</i>"
        else:
            message_text += f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{news['content']}"
        
        message_text += f"\n\nüîó <a href='{news['url']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Å–∞–π—Ç–µ</a>"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö –Ω–æ–≤–æ—Å—Ç—è–º", callback_data="news"),
            types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_news_read: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ç—å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö –Ω–æ–≤–æ—Å—Ç—è–º", callback_data="news")
            ).as_markup()
        )

async def handle_news_read_callback(callback: types.CallbackQuery):
    await callback.answer()
    try:
        news_index = int(callback.data.split("_")[2])
        await handle_news_read(callback, news_index)
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–∏")

def register_news_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_news_callback, lambda c: c.data == "news")
    dp.callback_query.register(handle_news_read_callback, lambda c: c.data.startswith("news_read_"))