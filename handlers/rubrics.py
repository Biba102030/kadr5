from aiogram import Dispatcher, types
from config import RUBRIKI, user_data, news_parser, MAX_ARTICLES
from keyboards import get_back_to_main_menu
from utils.helpers import send_article_content, fetch_rubrika_articles
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

async def handle_rubriki(callback: types.CallbackQuery):
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    for rubrika_name in RUBRIKI.keys():
        builder.add(types.InlineKeyboardButton(
            text=f"üìÇ {rubrika_name}",
            callback_data=f"rubrika_{RUBRIKI[rubrika_name]}"
        ))
    builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üìö **–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É:**\n\n"
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å—Ç–∞—Ç—å–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ–º–∞–º –∫–∞–¥—Ä–æ–≤–æ–≥–æ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:",
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )

async def handle_rubrika_articles(callback: types.CallbackQuery):
    await callback.answer()
    
    rubrika_slug = callback.data.split("_", 1)[1]
    rubrika_name = None
    
    for name, slug in RUBRIKI.items():
        if slug == rubrika_slug:
            rubrika_name = name
            break
    
    if not rubrika_name:
        await callback.message.answer("‚ùå –†—É–±—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
        return
    
    try:
        await callback.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ä—É–±—Ä–∏–∫–∏ '{rubrika_name}'...")
        
        articles = await fetch_rubrika_articles(rubrika_slug)
        
        if not articles:
            # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            demo_articles = {
                "trudovoe-pravo": [
                    {"title": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¢—Ä—É–¥–æ–≤–æ–º –∫–æ–¥–µ–∫—Å–µ 2024", "url": f"{news_parser.base_url}", "date": "01.12.2024"},
                    {"title": "–ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", "url": f"{news_parser.base_url}", "date": "28.11.2024"},
                    {"title": "–†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞: –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "url": f"{news_parser.base_url}", "date": "25.11.2024"}
                ],
                "nalogi-vznosy": [
                    {"title": "–ù–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–æ–≥–æ–≤ –∏ –≤–∑–Ω–æ—Å–æ–≤ –≤ 2024 –≥–æ–¥—É", "url": f"{news_parser.base_url}", "date": "02.12.2024"},
                    {"title": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã: —Ä–∞—Å—á–µ—Ç –∏ —É–ø–ª–∞—Ç–∞", "url": f"{news_parser.base_url}", "date": "30.11.2024"},
                    {"title": "–ù–î–§–õ —Å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "url": f"{news_parser.base_url}", "date": "27.11.2024"}
                ],
                "kadrovoe-deloproizvodstvo": [
                    {"title": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –≤ –∫–∞–¥—Ä–∞—Ö", "url": f"{news_parser.base_url}", "date": "03.12.2024"},
                    {"title": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "url": f"{news_parser.base_url}", "date": "01.12.2024"},
                    {"title": "–í–µ–¥–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤—ã—Ö –∫–Ω–∏–∂–µ–∫ –≤ 2024 –≥–æ–¥—É", "url": f"{news_parser.base_url}", "date": "29.11.2024"}
                ]
            }
            
            articles = demo_articles.get(rubrika_slug, [
                {"title": f"–°—Ç–∞—Ç—å—è –ø–æ —Ç–µ–º–µ '{rubrika_name}' 1", "url": f"{news_parser.base_url}", "date": "01.12.2024"},
                {"title": f"–°—Ç–∞—Ç—å—è –ø–æ —Ç–µ–º–µ '{rubrika_name}' 2", "url": f"{news_parser.base_url}", "date": "30.11.2024"},
                {"title": f"–°—Ç–∞—Ç—å—è –ø–æ —Ç–µ–º–µ '{rubrika_name}' 3", "url": f"{news_parser.base_url}", "date": "29.11.2024"}
            ])
        
        if not articles:
            await callback.message.edit_text(
                f"‚ùå –í —Ä—É–±—Ä–∏–∫–µ '{rubrika_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ä—É–±—Ä–∏–∫—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö —Ä—É–±—Ä–∏–∫–∞–º", callback_data="kadrovik_news")
                ).as_markup()
            )
            return
        
        user_data[callback.from_user.id] = {"rubrika_articles": articles}
        
        builder = InlineKeyboardBuilder()
        for i, article in enumerate(articles[:MAX_ARTICLES]):
            title_short = article["title"][:45] + "..." if len(article["title"]) > 45 else article["title"]
            builder.add(types.InlineKeyboardButton(
                text=f"üìÑ {title_short}",
                callback_data=f"rubrika_article_{i}"
            ))
        
        builder.row(
            types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö —Ä—É–±—Ä–∏–∫–∞–º", callback_data="kadrovik_news"),
            types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
        )
        builder.adjust(1)
        
        articles_text = f"üìÇ **{rubrika_name}**\n\n"
        articles_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}\n\n"
        
        for i, article in enumerate(articles[:5]):
            articles_text += f"{i+1}. **{article['title']}**\n"
            if article.get("date"):
                articles_text += f"   üìÖ {article['date']}\n\n"
        
        if len(articles) > 5:
            articles_text += f"... –∏ –µ—â–µ {len(articles) - 5} —Å—Ç–∞—Ç–µ–π\n\n"
            
        articles_text += "üëÜ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è —á—Ç–µ–Ω–∏—è:**"
        
        await callback.message.edit_text(
            articles_text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π —Ä—É–±—Ä–∏–∫–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π —Ä—É–±—Ä–∏–∫–∏ '{rubrika_name}'.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö —Ä—É–±—Ä–∏–∫–∞–º", callback_data="kadrovik_news")
            ).as_markup()
        )

async def handle_rubrika_article(callback: types.CallbackQuery):
    await callback.answer()
    try:
        idx = int(callback.data.split("_")[2])
        user_rubrika_articles = user_data.get(callback.from_user.id, {}).get("rubrika_articles", [])
        
        if 0 <= idx < len(user_rubrika_articles):
            await send_article_content(callback.from_user.id, user_rubrika_articles[idx])
        else:
            await callback.message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ —Ä—É–±—Ä–∏–∫–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())

def register_rubrics_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_rubriki, lambda c: c.data == "kadrovik_news")
    dp.callback_query.register(handle_rubrika_articles, lambda c: c.data.startswith("rubrika_"))
    dp.callback_query.register(handle_rubrika_article, lambda c: c.data.startswith("rubrika_article_"))