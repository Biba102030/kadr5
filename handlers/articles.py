from aiogram import Dispatcher, types
from config import user_data, MAX_ARTICLES
from keyboards import get_main_menu, get_back_to_main_menu
from utils.helpers import send_article_content, fetch_topics, fetch_topic_articles
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

async def handle_latest_articles(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í—Å–µ —Ç–µ–º—ã 34"""
    await callback.answer()
    try:
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å kadrovik.uz...")
        
        topics = await fetch_topics()
        
        if not topics:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_to_main_menu()
            )
            return
        
        user_data[callback.from_user.id] = {"topics": topics}
        
        builder = InlineKeyboardBuilder()
        for i, topic in enumerate(topics):
            title_short = topic['title'][:45] + '...' if len(topic['title']) > 45 else topic['title']
            builder.add(types.InlineKeyboardButton(
                text=f"üìö {title_short}",
                callback_data=f"topic_{i}"
            ))
        
        builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        builder.adjust(1)
        
        topics_list = "\n".join(f"{i+1}. {topic['title']}" for i, topic in enumerate(topics))
        await callback.message.edit_text(
            f"üìö <b>–í—Å–µ —Ç–µ–º—ã 34</b>\n\n{topics_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–µ–π:",
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_menu()
        )

async def handle_topic(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    await callback.answer()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback.data}")
    try:
        idx = int(callback.data.split("_")[1])
        user_topics = user_data.get(callback.from_user.id, {}).get("topics", [])
        
        if 0 <= idx < len(user_topics):
            topic = user_topics[idx]
            await callback.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–º—ã '{topic['title']}'...")
            
            articles = await fetch_topic_articles(topic['url'])
            
            if not articles:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–º—ã '{topic['title']}'.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                    reply_markup=InlineKeyboardBuilder().add(
                        types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö —Ç–µ–º–∞–º", callback_data="kadrovik_latest")
                    ).as_markup()
                )
                return
            
            user_data[callback.from_user.id]["topic_articles"] = articles
            
            builder = InlineKeyboardBuilder()
            for i, article in enumerate(articles[:MAX_ARTICLES]):
                title_short = article["title"][:45] + "..." if len(article["title"]) > 45 else article["title"]
                builder.add(types.InlineKeyboardButton(
                    text=f"üìÑ {title_short}",
                    callback_data=f"topic_article_{i}"
                ))
            
            builder.row(
                types.InlineKeyboardButton(text="‚ó∂Ô∏è –ö —Ç–µ–º–∞–º", callback_data="kadrovik_latest"),
                types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
            )
            builder.adjust(1)
            
            articles_text = f"üìö <b>{topic['title']}</b>\n\n"
            articles_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}\n\n"
            
            for i, article in enumerate(articles[:5]):
                articles_text += f"{i+1}. **{article['title']}**\n"
                if article.get("date"):
                    articles_text += f"   üìÖ {article['date']}\n\n"
            
            if len(articles) > 5:
                articles_text += f"... –∏ –µ—â–µ {len(articles) - 5} —Å—Ç–∞—Ç–µ–π\n\n"
                
            articles_text += "üëÜ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è —á—Ç–µ–Ω–∏—è:**"
            
            await callback.message.edit_text(
                articles_text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
        else:
            await callback.message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º—ã: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã", reply_markup=get_back_to_main_menu())

async def handle_topic_article(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–º—ã"""
    await callback.answer()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç—å–∏: {callback.data}")
    try:
        parts = callback.data.split("_")
        if not parts or len(parts) != 3 or parts[0] != "topic" or parts[1] != "article":
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", reply_markup=get_back_to_main_menu())
            return
        
        idx = int(parts[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ topic_article_<index>
        user_articles = user_data.get(callback.from_user.id, {}).get("topic_articles", [])
        
        if 0 <= idx < len(user_articles):
            await send_article_content(callback.from_user.id, user_articles[idx])
        else:
            await callback.message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())

def register_articles_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_latest_articles, lambda c: c.data == "kadrovik_latest")
    dp.callback_query.register(handle_topic, lambda c: c.data.startswith("topic_") and not c.data.startswith("topic_article_"))
    dp.callback_query.register(handle_topic_article, lambda c: c.data.startswith("topic_article_"))