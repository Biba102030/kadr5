from aiogram import Dispatcher, types
from config import user_data
from keyboards import get_main_menu, get_back_to_main_menu
from parser import fetch_articles_from_site, fetch_article_content
from utils.helpers import send_article_content
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

async def handle_latest_articles(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"""
    await callback.answer()
    try:
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å kadrovik.uz...")
        
        # –ü–∞—Ä—Å–∏–º 5 —Å—Ç–∞—Ç–µ–π –∏–∑ <ul class="posts-list">
        articles = await fetch_articles_from_site(lang="ru", limit=5)
        
        if not articles:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å —Å–∞–π—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_to_main_menu()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –≤ user_data
        user_data[callback.from_user.id] = {"latest_articles": articles}
        
        builder = InlineKeyboardBuilder()
        for i, article in enumerate(articles):
            title_short = article['title'][:45] + '...' if len(article['title']) > 45 else article['title']
            builder.add(types.InlineKeyboardButton(
                text=f"üìÑ {title_short}",
                callback_data=f"article_{i}"
            ))
        
        builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        builder.adjust(1)
        
        articles_list = "\n".join(f"{i+1}. {art['title']}" for i, art in enumerate(articles))
        await callback.message.edit_text(
            f"üì∞ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (5 —Å–≤–µ–∂–∏—Ö —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã kadrovik.uz)</b>\n\n{articles_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è —á—Ç–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_menu()
        )

async def handle_article(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏"""
    await callback.answer()
    try:
        idx = int(callback.data.split("_")[1])
        user_articles = user_data.get(callback.from_user.id, {}).get("latest_articles", [])
        
        if 0 <= idx < len(user_articles):
            await send_article_content(callback.from_user.id, user_articles[idx])
        else:
            await callback.message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_to_main_menu())
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())

def register_articles_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_latest_articles, lambda c: c.data == "kadrovik_latest")
    dp.callback_query.register(handle_article, lambda c: c.data.startswith("article_"))