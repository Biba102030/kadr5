import logging
from io import BytesIO
from aiogram import types
from keyboards import get_back_to_main_menu
from config import MAX_MESSAGE_LENGTH, bot, MAX_ARTICLES
from parser import fetch_article_content, search_articles

logger = logging.getLogger(__name__)

async def send_article_content(chat_id: int, article: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        content = article.get("text") if "text" in article and article["text"] else await fetch_article_content(article["url"])
        if not content:
            await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())
            return
        header = f"üì∞ {article['title']}\n"
        if article.get("date"):
            header += f"üìÖ {article['date']}\n"
        header += f"üîó {article['url']}\n\n"
        full_content = header + content
        if len(full_content) > MAX_MESSAGE_LENGTH:
            file = BytesIO(full_content.encode("utf-8"))
            file.name = f"{article['title'][:50]}.txt"
            await bot.send_document(chat_id, file, caption="üìÑ –°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞", reply_markup=get_back_to_main_menu())
        else:
            await bot.send_message(chat_id, full_content, reply_markup=get_back_to_main_menu(), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏", reply_markup=get_back_to_main_menu())

def format_search_results_text(articles, query):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    results_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞** –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
    for i, article in enumerate(articles[:MAX_ARTICLES]):
        title = article["title"][:57] + "..." if len(article["title"]) > 60 else article["title"]
        results_text += f"{i+1}. **{title}**\n"
        if article.get("date"):
            results_text += f"   üìÖ {article['date']}\n"
        if article.get("text"):
            text_preview = article["text"][:100] + "..." if len(article["text"]) > 100 else article["text"]
            results_text += f"   üìù {text_preview}\n"
        results_text += "\n"
    results_text += f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    return results_text

async def fetch_rubrika_articles(rubrika_slug):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏–∑ —Ä—É–±—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
    # –ú–∞–ø–ø–∏–Ω–≥ slug'–æ–≤ —Ä—É–±—Ä–∏–∫ –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    rubrika_queries = {
        "trudovoe-pravo": "—Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "nalogi-vznosy": "–Ω–∞–ª–æ–≥–∏ –∏ –≤–∑–Ω–æ—Å—ã",
        "kadrovoe-deloproizvodstvo": "–∫–∞–¥—Ä–æ–≤–æ–µ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "otpuska": "–æ—Ç–ø—É—Å–∫–∞",
        "bolnichnye": "–±–æ–ª—å–Ω–∏—á–Ω—ã–µ",
        "zarplata": "–∑–∞—Ä–ø–ª–∞—Ç–∞",
        "ohrana-truda": "–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞",
        "prakticheskie-voprosy": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
    }
    
    query = rubrika_queries.get(rubrika_slug, rubrika_slug.replace("-", " "))
    print(f"{datetime.now()}: –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É–±—Ä–∏–∫–∏ '{rubrika_slug}' —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º search_articles –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
        articles = await search_articles(query, "ru")
        return articles[:MAX_ARTICLES]
    except Exception as e:
        print(f"{datetime.now()}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä—É–±—Ä–∏–∫–∏ {rubrika_slug}: {e}")
        return []